import { Direction, Vector2, Vector3, VectorXZ } from "@minecraft/server";
export interface ReadonlyVector3 extends Vector3 {
    readonly x: number;
    readonly y: number;
    readonly z: number;
}
export interface ReadonlyVector2 extends Vector2 {
    readonly x: number;
    readonly y: number;
}
export interface ReadonlyVectorXZ extends VectorXZ {
    readonly x: number;
    readonly z: number;
}
export interface IVectorBuilder<T extends IVectorBuilder<T>> {
    equals(other: unknown): boolean;
    operate(callbackFn: (comopnent: number) => number): T;
    operate(other: T, callbackFn: (comopnent1: number, comopnent2: number) => number): T;
    operate(other1: T, other2: T, callbackFn: (comopnent1: number, comopnent2: number, component3: number) => number): T;
    add(other: T): T;
    subtract(other: T): T;
    scale(scalar: number): T;
    divide(scalar: number): T;
    clamp(min: T, max: T): T;
    format(format: string, digits: number): string;
    toString(): string;
    clone(): T;
    isZero(): boolean;
}
export declare class Vector3Builder implements Vector3, IVectorBuilder<Vector3Builder> {
    private __x__;
    private __y__;
    private __z__;
    constructor(x: number, y: number, z: number);
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
    equals(other: unknown): boolean;
    operate(callbackFn: (comopnent: number) => number): Vector3Builder;
    operate(other: Vector3, callbackFn: (comopnent1: number, comopnent2: number) => number): Vector3Builder;
    operate(other1: Vector3, other2: Vector3, callbackFn: (comopnent1: number, comopnent2: number, component3: number) => number): Vector3Builder;
    add(other: Vector3): Vector3Builder;
    subtract(other: Vector3): Vector3Builder;
    scale(scalar: number): Vector3Builder;
    divide(scalar: number): Vector3Builder;
    invert(): Vector3Builder;
    dot(other: Vector3): number;
    cross(other: Vector3): Vector3Builder;
    hadamard(other: Vector3): Vector3Builder;
    length(): number;
    length(length: number): Vector3Builder;
    normalize(): Vector3Builder;
    getAngleBetween(other: Vector3): number;
    getDistanceTo(other: Vector3): number;
    getDirectionTo(other: Vector3): Vector3Builder;
    project(other: Vector3): Vector3Builder;
    reject(other: Vector3): Vector3Builder;
    reflect(normal: Vector3): Vector3Builder;
    lerp(other: Vector3, t: number): Vector3Builder;
    slerp(other: Vector3, s: number): Vector3Builder;
    clamp(min: Vector3, max: Vector3): Vector3Builder;
    clone(): Vector3Builder;
    format(format: string, digits: number): string;
    toString(): string;
    getRotation2d(): DualAxisRotationBuilder;
    rotate(axis: Vector3, angle: number): Vector3Builder;
    isZero(): boolean;
    toXZ(): VectorXZ;
    static isVector3(value: unknown): value is Vector3;
    static isVectorXZ(value: unknown): value is VectorXZ;
    static zero(): Vector3Builder;
    static forward(): Vector3Builder;
    static back(): Vector3Builder;
    static left(): Vector3Builder;
    static right(): Vector3Builder;
    static up(): Vector3Builder;
    static down(): Vector3Builder;
    static filled(value: number): Vector3Builder;
    static from(vector3: Vector3): Vector3Builder;
    static from(vectorXZ: VectorXZ, y?: number): Vector3Builder;
    static from(direction: Direction): Vector3Builder;
    static min(a: Vector3, b: Vector3): Vector3Builder;
    static max(a: Vector3, b: Vector3): Vector3Builder;
}
export declare class DualAxisRotationBuilder implements Vector2, IVectorBuilder<DualAxisRotationBuilder> {
    private __yaw__;
    private __pitch__;
    constructor(yaw: number, pitch: number);
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get yaw(): number;
    set yaw(value: number);
    get pitch(): number;
    set pitch(value: number);
    equals(other: unknown): boolean;
    operate(callbackFn: (comopnent: number) => number): DualAxisRotationBuilder;
    operate(other: Vector2, callbackFn: (comopnent1: number, comopnent2: number) => number): DualAxisRotationBuilder;
    operate(other1: Vector2, other2: Vector2, callbackFn: (component1: number, component2: number, component3: number) => number): DualAxisRotationBuilder;
    add(other: Vector2): DualAxisRotationBuilder;
    subtract(other: Vector2): DualAxisRotationBuilder;
    scale(scalar: number): DualAxisRotationBuilder;
    divide(scalar: number): DualAxisRotationBuilder;
    invert(): DualAxisRotationBuilder;
    clamp(min: Vector2, max: Vector2): DualAxisRotationBuilder;
    clone(): DualAxisRotationBuilder;
    format(format: string, digits: number): string;
    toString(): string;
    getDirection3d(): Vector3Builder;
    isZero(): boolean;
    static isVector2(value: unknown): value is Vector2;
    static zero(): DualAxisRotationBuilder;
    static filled(value: number): DualAxisRotationBuilder;
    static from(vector2: Vector2): DualAxisRotationBuilder;
}
export declare class TripleAxisRotationBuilder implements IVectorBuilder<TripleAxisRotationBuilder> {
    private __yaw__;
    private __pitch__;
    private __roll__;
    constructor(yaw: number, pitch: number, roll: number);
    get yaw(): number;
    set yaw(value: number);
    get pitch(): number;
    set pitch(value: number);
    get roll(): number;
    set roll(value: number);
    equals(other: unknown): boolean;
    operate(callbackFn: (comopnent: number) => number): TripleAxisRotationBuilder;
    operate(other: TripleAxisRotationBuilder, callbackFn: (comopnent1: number, comopnent2: number) => number): TripleAxisRotationBuilder;
    operate(other1: TripleAxisRotationBuilder, other2: TripleAxisRotationBuilder, callbackFn: (comopnent1: number, comopnent2: number, component3: number) => number): TripleAxisRotationBuilder;
    add(other: TripleAxisRotationBuilder): TripleAxisRotationBuilder;
    subtract(other: TripleAxisRotationBuilder): TripleAxisRotationBuilder;
    scale(scalar: number): TripleAxisRotationBuilder;
    divide(scalar: number): TripleAxisRotationBuilder;
    invert(): TripleAxisRotationBuilder;
    clamp(min: TripleAxisRotationBuilder, max: TripleAxisRotationBuilder): TripleAxisRotationBuilder;
    clone(): TripleAxisRotationBuilder;
    format(format: string, digits: number): string;
    toString(): string;
    getDirection3d(): Vector3Builder;
    getObjectCoordsSystem(): InstanceType<(typeof TripleAxisRotationBuilder)["ObjectCoordsSystem"]>;
    isZero(): boolean;
    static zero(): TripleAxisRotationBuilder;
    static filled(value: number): TripleAxisRotationBuilder;
    static from(vector2: Vector2, zAngle?: number): TripleAxisRotationBuilder;
    private static readonly ObjectCoordsSystem;
}
