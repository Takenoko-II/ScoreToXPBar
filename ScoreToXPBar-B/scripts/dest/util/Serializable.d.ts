export declare class SerializationError extends Error {
}
export declare class Serializer {
    private readonly properties;
    get indentationSpaceCount(): number;
    set indentationSpaceCount(value: number);
    get linebreakable(): boolean;
    set linebreakable(value: boolean);
    get interpretCircularReference(): boolean;
    set interpretCircularReference(value: boolean);
    hidePrototypeOf(clazz: Function): void;
    unhidePrototypeOf(clazz: Function): void;
    isHidden(clazz: Function): boolean;
    serialize(value: unknown): string;
    private newReference;
    private getCircularReference;
    protected getPropertiesOf(object: object): string[];
    protected getPrototypeOf(object: object): object | null;
    protected boolean(boolean: boolean): string;
    protected number(number: number): string;
    protected bigint(bigint: bigint): string;
    protected string(string: string): string;
    protected symbol(symbol: symbol): string;
    protected null(): string;
    protected undefined(): string;
    protected indentation(count: number): string;
    protected linebreak(): string;
    protected prototype(ref: Set<unknown>, object: object, indentation: number): string;
    protected function(__function__: Function): string;
    protected key(key: string): string;
    protected object(ref: Set<unknown>, object: object, indentation: number, forceAsObject?: boolean): string;
    protected array(ref: Set<unknown>, array: any[], indentation: number): string;
    protected map(ref: Set<unknown>, map: Map<unknown, unknown>, indentation: number): string;
    protected set(ref: Set<unknown>, set: Set<unknown>, indentation: number): string;
    protected unknown(ref: Set<unknown>, target: unknown, indentation: number): string;
    private static readonly ARGUMENTS_BRACES;
    private static readonly OBJECT_BRACES;
    private static readonly ARRAY_BRACES;
    private static readonly CLASS_INSTANCE_BRACES;
    private static readonly COMMA;
    private static readonly COLON;
    private static readonly WHITESPACE;
    private static readonly QUOTE;
    private static readonly LINEBREAK;
    private static readonly EMPTY;
    private static readonly CODE;
    private static readonly UNQUOTED_KEY_PATTERN;
    private static readonly FUNCTION;
    private static readonly ASYNC;
    private static readonly CLASS;
    private static readonly SYMBOL;
    private static readonly MAP;
    private static readonly SET;
    private static readonly NULL;
    private static readonly UNDEFINED;
    private static readonly PROTOTYPE;
    private static readonly CIRCULAR_REFERENCE_OBJECT;
}
